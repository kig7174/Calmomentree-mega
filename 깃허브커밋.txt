깃허브 커밋 메시지 규칙

제목 규칙
1. 제목은 최대 50글자 넘지 않기
2. 마침표 및 특수기호 사용x
3. 첫 글자 대문자, 명령문 사용
4. 개조식 구문으로 작성(간결하고 요점적인 서술)

내용 규칙
1. 한 줄당 72자 내로 작성
2. 최대한 상세히 작성
3. 어떻게 보다는 '무엇을', '왜' 변경했는지에 대해 작성
------------------------------------------------------


- 커밋 메세지
// 일회성
.gitmessage.txt 생성 // .gitignore에 추가하면 좋음
주석 내용 넣기
작업파일에서 명령프롬포트열기
$ git config --local commit.template .gitmessage.txt
$ git config --local core.editor "vim"

//커밋하기
$ git add -A
$ git commit
커밋 메세지를 담는 템플릿이 나옴
i 누르기
메세지 작성 // # 이후 내용은 주석 메세지에 담기지 않음
esc누르기
:wq 엔터
push
------------------------------------------------------


기본 커밋 양식
키워드: 날짜 -  제목

내용 (생략 가능)

ex)
------------------------------------------------------
Docs: 24/10/26 프로젝트 계획서 문서 수정

기획 단계 일정 조율
------------------------------------------------------


이슈 커밋 양식
키워드 (스코프): 24/10/27 날짜 - 제목 (진행도)

내용 (생략 가능)

이슈 키워드 및 이슈 번호

ex)
------------------------------------------------------
Feat (input): 마이페이지 > 회원정보수정 HTML

게시글 목록 CSS 생성 및 작업 진행 (30%)

FIxes #1
------------------------------------------------------



스코프 (생략가능)
어디가 변경되었는지, 변경된 부분

키워드
Feat		: 새로운 기능 추가
Fix		: 버그 수정 또는 typo
Refactor	: 리팩토링
Design	: CSS 등 사용자 UI 디자인 변경
Comment	: 필요한 주석 추가 및 변경
Style		: 코드 포맷팅, 세미콜론 누락, 코드 변경이 없는 경우
Test		: 테스트(테스트 코드 추가, 수정, 삭제, 비즈니스 로직에 변경이 없는 경우)
Chore	: 위에 걸리지 않는 기타 변경사항(빌드 스크립트 수정, assets image, 패키지 매니저 등)
Init		: 프로젝트 초기 생성
Rename	: 파일 혹은 폴더명 수정하거나 옮기는 경우
Remove	: 파일을 삭제하는 작업만 수행하는 경우

이슈 키워드
Fixes		: 이슈 수정중 (아직 해결되지 않은 경우)  
Close		: 이슈 해결했을 때 사용  
Ref		: 참고할 이슈가 있을 때 사용  
Related to	: 해당 커밋에 관련된 이슈번호 (아직 해결되지 않은 경우)

---------------------------------------------------------------------------------

주석 예시 (본인이 원하는 내용으로 수정가능)
################
# <키워드>: <날짜> - <제목> 의 형식으로 제목을 아래 공백줄에 작성
# 제목은 50자 이내 / 변경사항이 "무엇"인지 명확히 작성 / 끝에 마침표 금지
# 예) Docs: 24/10/26 프로젝트 계획서 문서 수정

# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)

################
# 본문(구체적인 내용)을 아랫줄에 작성
# 여러 줄의 메시지를 작성할 땐 "-"로 구분 (한 줄은 72자 이내)
# 예) 기획 단계 일정 조율

################
# 꼬릿말(footer)을 아랫줄에 작성 (현재 커밋과 관련된 이슈 번호 추가 등)
# 예) Close #7

################
#키워드
#Feat		: 새로운 기능 추가
#Fix		: 버그 수정 또는 typo
#Refactor	: 리팩토링
#Design	: CSS 등 사용자 UI 디자인 변경
#Comment	: 필요한 주석 추가 및 변경
#Style		: 코드 포맷팅, 세미콜론 누락, 코드 변경이 없는 경우
#Test		: 테스트(테스트 코드 추가, 수정, 삭제, 비즈니스 로직에 변경이 없는 경우)
#Chore	: 위에 걸리지 않는 기타 변경사항(빌드 스크립트 수정, assets image, 패키지 매니저 등)
#Init		: 프로젝트 초기 생성
#Rename	: 파일 혹은 폴더명 수정하거나 옮기는 경우
#Remove	: 파일을 삭제하는 작업만 수행하는 경우
#
#이슈 키워드
#Fixes		: 이슈 수정중 (아직 해결되지 않은 경우)  
#Closes	: 이슈 해결했을 때 사용  
#Ref		: 참고할 이슈가 있을 때 사용  
#Related to	: 해당 커밋에 관련된 이슈번호 (아직 해결되지 않은 경우)
################